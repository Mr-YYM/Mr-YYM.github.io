<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yeming Studio</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-09T12:34:03.657Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yeming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>first</title>
    <link href="http://yoursite.com/2019/06/09/first/"/>
    <id>http://yoursite.com/2019/06/09/first/</id>
    <published>2019-06-09T09:19:48.000Z</published>
    <updated>2019-06-09T12:34:03.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><p>Hello World</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;first&quot;&gt;&lt;a href=&quot;#first&quot; class=&quot;headerlink&quot; title=&quot;first&quot;&gt;&lt;/a&gt;first&lt;/h1&gt;&lt;p&gt;Hello World&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/09/hello-world/"/>
    <id>http://yoursite.com/2019/06/09/hello-world/</id>
    <published>2019-06-09T08:26:25.286Z</published>
    <updated>2019-06-09T08:26:25.286Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python装饰器入门</title>
    <link href="http://yoursite.com/2018/08/07/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/08/07/Python装饰器入门/</id>
    <published>2018-08-07T09:11:09.000Z</published>
    <updated>2019-06-10T04:12:55.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>装饰器的作用或者说什么是装饰器，看四段解释</p><h3 id="①-The-code-ship"><a href="#①-The-code-ship" class="headerlink" title="① The code ship"></a><a href="https://www.thecodeship.com/patterns/guide-to-python-function-decorators/" target="_blank" rel="noopener">① The code ship</a></h3><blockquote><p>In the context of design patterns, decorators <strong>dynamically alter the functionality of a function, method or class</strong> <strong>【动态的改变函数或类的功能】</strong>without having to directly use subclasses. </p></blockquote><h3 id="②-Wikipedia"><a href="#②-Wikipedia" class="headerlink" title="② Wikipedia"></a><a href="https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators" target="_blank" rel="noopener">② Wikipedia</a></h3><blockquote><p>A decorator is any callable Python object that is used to <strong>modify a function, method or class definition.</strong>  </p></blockquote><h3 id="③-Wikipedia"><a href="#③-Wikipedia" class="headerlink" title="③ Wikipedia"></a><a href="https://en.wikipedia.org/wiki/Decorator_pattern" target="_blank" rel="noopener">③ Wikipedia</a></h3><blockquote><p>In object-oriented programming, the decorator pattern is a design pattern that allows <strong>behavior to be added to an individual object,</strong> either statically or dynamically, without affecting the behavior of other objects from the same class.【修饰模式，是面向对象编程领域中，一种动态地<strong>往一个类中添加新的行为</strong>的设计模式。】</p></blockquote><h3 id="④-Python之禅"><a href="#④-Python之禅" class="headerlink" title="④ Python之禅"></a><a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">④ Python之禅</a></h3><blockquote><p>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下<strong>增加额外功能</strong>，装饰器的返回值也是一个函数/类对象。它经常用于有切面需求的场景，比如：<strong>插入日志</strong>、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p></blockquote><p>总结上方的话，简单的理解，装饰器就是给函数添加额外的功能（在不改变原来函数的定义的前提下）</p><h2 id="基础装饰器"><a href="#基础装饰器" class="headerlink" title="基础装饰器"></a>基础装饰器</h2><p>用代码简单的了解装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Decorator that reports the execution time.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(func.__name__, end-start)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timethis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m_sleep</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'sleep 1秒'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这段代码是我们最后要实现的效果，现在一开始可能看不懂，没关系，我们一步步的了解。</p><p>这段代码展示了装饰器的一个使用场景，代码中的装饰器使用是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timethis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m_sleep</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'sleep 1秒'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里我们定义了一个函数，用于sleep 1秒。装饰器在哪，就在他的上方<code>@timethis</code> 这样子我们就给<code>m_sleep()</code>添加了一个装饰器，即为他们添加了额外的功能，这个功能就是记录函数运行花费的时间。</p><p>运行结果：</p><p><img src="https://codingnote.oss-cn-shenzhen.aliyuncs.com/01.png" alt></p><p>可以看出</p><p>该函数本来只是打印输出一串字符并sleep 1秒，然而后边却多了一个计算并打印运算时间的功能。这就是简单的装饰器的应用。</p><h3 id="如何定义装饰器"><a href="#如何定义装饰器" class="headerlink" title="如何定义装饰器"></a>如何定义装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Define a Decorator</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>如上代码所示，要定义一个装饰器，就要定义一个函数，函数名就是装饰器的名字，这个装饰器要接收一个函数作为参数（我们知道，python当中，python函数可以是一个函数对象，因此可以用函数名指向一个函数）</p><blockquote><p>一个装饰器就是一个函数，它接受一个函数作为参数<strong>并返回一个新的函数</strong>。</p></blockquote><p>我们继续看代码，定义装饰器之后，我们在它内部继续定义一个函数。最后，装饰器返回了这个函数。该函数（wrapper）返回后，开始执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    result = func()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(func.__name__, end-start)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>我们看到，<code>func()</code> 这就是被装饰的函数，它在里面开始执行了。<code>wrapper</code> 里就定义了装饰器具体做的事情。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p>1、<a href="https://zh.wikipedia.org/wiki/%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F</a></p><p>2、<a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">https://foofish.net/python-decorator.html</a></p><p>3、<a href="https://www.thecodeship.com/patterns/guide-to-python-function-decorators/" target="_blank" rel="noopener">https://www.thecodeship.com/patterns/guide-to-python-function-decorators/</a></p><p>4、<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p02_preserve_function_metadata_when_write_decorators.html" target="_blank" rel="noopener">http://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p02_preserve_function_metadata_when_write_decorators.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
</feed>
